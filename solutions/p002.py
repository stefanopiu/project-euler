"""
Author: Stefano Piu

Project Euler - Problem 002

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"""

def fib(n,d):
    """
    n: an int for which we want to compute a Fibonacci number
    d: a dictionary where all Fibonacci numbers will be stored
    
    Returns the Fibonacci number for n while building a dictionary for all the intermediate ones
    """
    if n in d:
        return d[n]
    else:
        ans = fib(n-1, d) + fib(n-2, d)
        d[n] = ans
        return ans
    
d = {1:1, 2:2} # Need the base cases
print(fib(32, d)) # Generate Fibonacci numbers < 4 million

tot = 0 # an int that will contain the sum

for f in d.values():
    if f%2 == 0:
        tot += f
        
print("Problem 002:", tot)
